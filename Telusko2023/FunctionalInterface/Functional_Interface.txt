An interface with exactly one abstract method is called Functional Interface. 

@FunctionalInterface annotation is added so that we can mark an interface as functional interface. 
It is not mandatory to use it, but itâ€™s best practice to use it with functional interfaces to avoid addition of extra methods accidentally. 
If the interface is annotated with @FunctionalInterface annotation and we try to have more than one abstract method, 
it throws compiler error. 

The major benefit of java 8 functional interfaces is that we can use lambda expressions to instantiate them 
and avoid using bulky anonymous class implementation. 

Java 8 Collections API has been rewritten and new Stream API is introduced that uses a
lot of functional interfaces. 
Java 8 has defined a lot of functional interfaces in java.util.function package. 
Some of the useful java 8 functional interfaces are Consumer, Supplier, Function and Predicate. 
You can find more detail about them in Java 8 Stream Example. 

java.lang.Runnable is a great example of functional interface with single abstract method run(). 
