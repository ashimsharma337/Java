Services in Angular provide data and logic that can be reused across components. 
Like the approach we use in Spring, we always want the application logic to be separated from the view logic. 
You may have multiple components that need the same logic, so this approach prevents us from duplicating code. 
Services in Angular are declared with the @Injectable decorator and can be injected into the components that 
need them.
One of the biggest use cases for Angular services is managing or manipulating or even storing data

Angular provides many pre-built services for you to leverage, 
including the Http service to handle your Ajax calls for you. 
The Http service methods return an Observable, which is a stream of data from the server, 
and provides many benefits over using Promises. 

Features of Angular Services
Services in Angular are simply typescript classes with the @injectible decorator. 
This decorator tells angular that the class is a service and can be injected into components that need that service. They can also inject other services as dependencies. 
These services are used to share a single piece of code across multiple components. 
These services are used to hold business logic. 
Services are used to interact with the backend. For example, if you wish to make AJAX calls, 
you can have the methods to those calls in the service and use it as a dependency in files.
In angular, the components are singletons, meaning that only one instance of a service that gets created, 
and the same instance is used by every building block in the application. 
A service can be registered as a part of the module, or as a part of the component. 
To register it as a part of the component, you’ll have to specify it in the providers’ array of the module. 

LINKS: 
Services and Dependency Injection:          https://angular.io/guide/architecture#services-and-dependency-injection
Adding Services:                            https://angular.io/tutorial/tour-of-heroes/toh-pt4
Communicating with backend using Http:      https://angular.io/guide/http
Observables in Angular:                     https://angular.io/guide/observables-in-angular