Exception Handling 

Exceptions 
Exceptional events that occur in the the code at runtime 
- Reading a corrupted file 
- Network connection failure 
- Division by zero 
- Calling method without an object 
- Every Exception has a type 

All exceptions inherits from the throwable class 

Checked exceptions
 - Compiler forces us to handle this exceptions 
     e.g - IOException (corrupted file)
         - ConnectException (error in connection)

Unchecked exception 
     e.g - ArthmeticException (Division by zero)
         - NullPointerException 


In stack, if it does not find the handler stack will terminate. Using handler stack can keep on running 

Handler is a try catch block 
  try {
    // risky code
  } catch (ConnectException e) {
    // recovery procedure 
  }

   ---> Throwable <--- 
              |    (checked)     |
              |                  |
              |                  |
      ---> Exception           Error
      |    (checked)        (unchecked)
      |
RuntimeException
  (unchecked)


Instead of try catch block we can also use throws 

We can use throws keyword to delegate the responsibility of exception handling to the caller 
(It may be a method or JVM) then caller method is responsible to handle that exception.  

The throw keyword is used to create a custom error.

The throw statement is used together with an exception type.

There are many exception types available in Java: ArithmeticException, 
ClassNotFoundException, ArrayIndexOutOfBoundsException, SecurityException, etc.


Differences between throw and throws:

throw	                                                                             throws
Used to throw an exception for a method	                    Used to indicate what exception type may be thrown by a method
Cannot throw multiple exceptions	                          Can declare multiple exceptions
Syntax:                                                     Syntax:
throw is followed by an object (new type)                   throws is followed by a class
used inside the method                                      and used with the method signature

                                        ***throw example*** 

public class Main {
  static void checkAge(int age) {
    if (age < 18) {
      throw new ArithmeticException("Access denied - You must be at least 18 years old.");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) {
    checkAge(15); // Set age to 15 (which is below 18...)
  }
}


                                     ***throws example***

public class Main {                     
  static void checkAge(int age) throws ArithmeticException {
    if (age < 18) {
      throw new ArithmeticException("Access denied - You must be at least 18 years old.");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) {
    checkAge(15); // Set age to 15 (which is below 18...)
  }
}                                                          


Important points to remember about throws keyword: 

-throws keyword is required only for checked exception and usage of throws keyword for unchecked exception is meaningless.
-throws keyword is required only to convince compiler and usage of throws keyword does not prevent abnormal termination of program.
-By the help of throws keyword we can provide information to the caller of the method about the exception.