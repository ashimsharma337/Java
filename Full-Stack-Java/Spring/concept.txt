Spring 
It was developed by Rod Johnson in 2003.
It is frameworks of framework. It is Dependency Injection framework to make java application loosely coupled.
Spring provides IOC (inversion of controll) container which helps in dependency injection.
Spring framework makes the easy development of JavaEE application.

Spring Provide the object to another object with the help of class called ApplicationContext spring will create it
Originally called BeanFactory (which is also called IoC Container, Spring Container, Bean Factory)

Dependency Injection is design pattern and Inversion of controll

The most important module in the Spring Framework is Core Container & Dependency Injection (DI) 
acts as the heart of Spring’s Core Container.
In a conventional way, Developers will have control over the code in creating the objects 
& injecting them at run time. 
Here, the Spring framework takes the control of doing the above-mentioned activities at run time, 
that’s why the term is coined as ‘Inversion of Control’ (IoC) i.e., the control is inverted!

The Spring Framework can be describe is three ways:

Spring is a framework for dependency injection: 
-A design pattern that allows the developer to build very decoupled systems by injecting dependencies into classes.
-It elegantly wraps Java libraries and makes then much easier to use in your application.
-Included in the framework are implementations of commonly used patterns such as REST and 
 MVC web framework which are predominately use by in web applications.

                                   
                                   Spring and JEE 
    
    UI Layer(Strut/JSF)                              ProductController 
       |    (Spring MVC)                                |     ^
       |                                                |     | inject
    Bussiness/Services                                ProductSevice 
    Layer    (Security)                                  |     ^
       |     (Transaction Management)                          | inject
       |                                                 |     |
    Data Access Layer(Spring JDBC)                     ProductDao
       |             (Spring ORM)
       |
    Database 


Stereotype Annotations
Spring Framework provides us with some special annotations. 
These annotations are used to create Spring beans automatically in the application context. 
@Component annotation is the main Stereotype Annotation. 
There are some Stereotype meta-annotations which is derived from @Component those are

@Service
@Repository
@Controller
1: @Service: We specify a class with @Service to indicate that they’re holding the business logic. 
Besides being used in the service layer, there isn’t any other special use for this annotation. 
The utility classes can be marked as Service classes.

2: @Repository: We specify a class with @Repository to indicate that they’re dealing with CRUD operations, 
usually, it’s used with DAO (Data Access Object) or Repository implementations that deal with database tables.


3: @Controller: We specify a class with @Controller to indicate that they’re 
front controllers and responsible to handle user requests and return the appropriate response. 
It is mostly used with REST Web Services.

So the stereotype annotations in spring are @Component, @Service, @Repository, and @Controller.
@Component is general

Link: 
Spring Framework:          https://stormsurge.skillstorm.com/courses/82/pages/road-map-%7C-spring
Design Patterns(IoC & DI): https://martinfowler.com/articles/injection.html 
Spring IoC Container:      https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-introduction 
Stereotype Annotations:    https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/package-summary.html 
Spring Fundamentals:       https://code.likeagirl.io/spring-fundamentals-beans-container-and-dependency-injection-bce17604a50b
